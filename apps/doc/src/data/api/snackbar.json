[
  {
    "tags": {},
    "filePath": "node_modules/@udixio/ui-react/src/lib/components/Snackbar.tsx",
    "description": "",
    "displayName": "Snackbar",
    "methods": [],
    "props": {
      "initial": {
        "defaultValue": null,
        "description": "Properties, variant label or array of variant labels to start in.\n\nSet to `false` to initialise with the values in `animate` (disabling the mount animation)\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```",
        "name": "initial",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAnimationOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAnimationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | TargetAndTransition | VariantLabels"
        }
      },
      "animate": {
        "defaultValue": null,
        "description": "Values to animate to, variant label(s), or `LegacyAnimationControls`.\n\n```jsx\n// As values\n<motion.div animate={{ opacity: 1 }} />\n\n// As variant\n<motion.div animate=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div animate={[\"visible\", \"active\"]} variants={variants} />\n\n// LegacyAnimationControls\n<motion.div animate={animation} />\n```",
        "name": "animate",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAnimationOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAnimationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | TargetAndTransition | VariantLabels | LegacyAnimationControls"
        }
      },
      "exit": {
        "defaultValue": null,
        "description": "A target to animate to when this component is removed from the tree.\n\nThis component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```",
        "name": "exit",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAnimationOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAnimationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "TargetAndTransition | VariantLabels"
        }
      },
      "variants": {
        "defaultValue": null,
        "description": "Variants allow you to define animation states and organise them by name. They allow\nyou to control animations throughout a component tree by switching a single `animate` prop.\n\nUsing `transition` options like `delayChildren` and `when`, you can orchestrate\nwhen children animations play relative to their parent.\n\n\nAfter passing variants to one or more `motion` component's `variants` prop, these variants\ncan be used in place of values on the `animate`, `initial`, `whileFocus`, `whileTap` and `whileHover` props.\n\n```jsx\nconst variants = {\n  active: {\n      backgroundColor: \"#f00\"\n  },\n  inactive: {\n    backgroundColor: \"#fff\",\n    transition: { duration: 2 }\n  }\n}\n\n<motion.div variants={variants} animate=\"active\" />\n```",
        "name": "variants",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAnimationOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAnimationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Variants"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Default transition. If no `transition` is defined in `animate`, it will use the transition defined here.\n```jsx\nconst spring = {\n  type: \"spring\",\n  damping: 10,\n  stiffness: 100\n}\n\n<motion.div transition={spring} animate={{ scale: 1.2 }} />\n```",
        "name": "transition",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAnimationOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAnimationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Transition<any>"
        }
      },
      "onUpdate": {
        "defaultValue": null,
        "description": "Callback with latest motion values, fired max once per frame.\n\n```jsx\nfunction onUpdate(latest) {\n  console.log(latest.x, latest.opacity)\n}\n\n<motion.div animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n```",
        "name": "onUpdate",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeEventOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeEventOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(latest: ResolvedValues) => void"
        }
      },
      "onAnimationComplete": {
        "defaultValue": null,
        "description": "Callback when animation defined in `animate` is complete.\n\nThe provided callback will be called with the triggering animation definition.\nIf this is a variant, it'll be the variant name, and if a target object\nthen it'll be the target object.\n\nThis way, it's possible to figure out which animation has completed.\n\n```jsx\nfunction onComplete() {\n  console.log(\"Animation completed\")\n}\n\n<motion.div\n  animate={{ x: 100 }}\n  onAnimationComplete={definition => {\n    console.log('Completed animating', definition)\n  }}\n/>\n```",
        "name": "onAnimationComplete",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeEventOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeEventOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(definition: AnimationDefinition) => void"
        }
      },
      "onPan": {
        "defaultValue": null,
        "description": "Callback function that fires when the pan gesture is recognised on this element.\n\n**Note:** For pan gestures to work correctly with touch input, the element needs\ntouch scrolling to be disabled on either x/y or both axis with the\n[touch-action](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) CSS rule.\n\n```jsx\nfunction onPan(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPan={onPan} />\n```\n@param event - The originating pointer event.\n@param info - A {@link PanInfo } object containing `x` and `y` values for:\n\n- `point`: Relative to the device or page.\n- `delta`: Distance moved since the last event.\n- `offset`: Offset from the original pan event.\n- `velocity`: Current velocity of the pointer.",
        "name": "onPan",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodePanHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodePanHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent, info: PanInfo) => void"
        }
      },
      "onPanStart": {
        "defaultValue": null,
        "description": "Callback function that fires when the pan gesture begins on this element.\n\n```jsx\nfunction onPanStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanStart={onPanStart} />\n```\n@param event - The originating pointer event.\n@param info - A {@link PanInfo } object containing `x`/`y` values for:\n\n- `point`: Relative to the device or page.\n- `delta`: Distance moved since the last event.\n- `offset`: Offset from the original pan event.\n- `velocity`: Current velocity of the pointer.",
        "name": "onPanStart",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodePanHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodePanHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent, info: PanInfo) => void"
        }
      },
      "onPanSessionStart": {
        "defaultValue": null,
        "description": "Callback function that fires when we begin detecting a pan gesture. This\nis analogous to `onMouseStart` or `onTouchStart`.\n\n```jsx\nfunction onPanSessionStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanSessionStart={onPanSessionStart} />\n```\n@param event - The originating pointer event.\n@param info - An {@link EventInfo } object containing `x`/`y` values for:\n\n- `point`: Relative to the device or page.",
        "name": "onPanSessionStart",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodePanHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodePanHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent, info: EventInfo) => void"
        }
      },
      "onPanEnd": {
        "defaultValue": null,
        "description": "Callback function that fires when the pan gesture ends on this element.\n\n```jsx\nfunction onPanEnd(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanEnd={onPanEnd} />\n```\n@param event - The originating pointer event.\n@param info - A {@link PanInfo } object containing `x`/`y` values for:\n\n- `point`: Relative to the device or page.\n- `delta`: Distance moved since the last event.\n- `offset`: Offset from the original pan event.\n- `velocity`: Current velocity of the pointer.",
        "name": "onPanEnd",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodePanHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodePanHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent, info: PanInfo) => void"
        }
      },
      "onTap": {
        "defaultValue": null,
        "description": "Callback when the tap gesture successfully ends on this element.\n\n```jsx\nfunction onTap(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTap={onTap} />\n```\n@param event - The originating pointer event.\n@param info - An {@link TapInfo } object containing `x` and `y` values for the `point` relative to the device or page.",
        "name": "onTap",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeTapHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeTapHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo) => void"
        }
      },
      "onTapStart": {
        "defaultValue": null,
        "description": "Callback when the tap gesture starts on this element.\n\n```jsx\nfunction onTapStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTapStart={onTapStart} />\n```\n@param event - The originating pointer event.\n@param info - An {@link TapInfo } object containing `x` and `y` values for the `point` relative to the device or page.",
        "name": "onTapStart",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeTapHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeTapHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo) => void"
        }
      },
      "onTapCancel": {
        "defaultValue": null,
        "description": "Callback when the tap gesture ends outside this element.\n\n```jsx\nfunction onTapCancel(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTapCancel={onTapCancel} />\n```\n@param event - The originating pointer event.\n@param info - An {@link TapInfo } object containing `x` and `y` values for the `point` relative to the device or page.",
        "name": "onTapCancel",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeTapHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeTapHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo) => void"
        }
      },
      "whileTap": {
        "defaultValue": null,
        "description": "Properties or variant label to animate to while the component is pressed.\n\n```jsx\n<motion.div whileTap={{ scale: 0.8 }} />\n```",
        "name": "whileTap",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeTapHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeTapHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "TargetAndTransition | VariantLabels"
        }
      },
      "globalTapTarget": {
        "defaultValue": null,
        "description": "If `true`, the tap gesture will attach its start listener to window.\n\nNote: This is not supported publically.",
        "name": "globalTapTarget",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeTapHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeTapHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "whileHover": {
        "defaultValue": null,
        "description": "Properties or variant label to animate to while the hover gesture is recognised.\n\n```jsx\n<motion.div whileHover={{ scale: 1.2 }} />\n```",
        "name": "whileHover",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeHoverHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeHoverHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "TargetAndTransition | VariantLabels"
        }
      },
      "onHoverStart": {
        "defaultValue": null,
        "description": "Callback function that fires when pointer starts hovering over the component.\n\n```jsx\n<motion.div onHoverStart={() => console.log('Hover starts')} />\n```",
        "name": "onHoverStart",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeHoverHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeHoverHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent, info: EventInfo) => void"
        }
      },
      "onHoverEnd": {
        "defaultValue": null,
        "description": "Callback function that fires when pointer stops hovering over the component.\n\n```jsx\n<motion.div onHoverEnd={() => console.log(\"Hover ends\")} />\n```",
        "name": "onHoverEnd",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeHoverHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeHoverHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent, info: EventInfo) => void"
        }
      },
      "whileFocus": {
        "defaultValue": null,
        "description": "Properties or variant label to animate to while the focus gesture is recognised.\n\n```jsx\n<motion.input whileFocus={{ scale: 1.2 }} />\n```",
        "name": "whileFocus",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeFocusHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeFocusHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "TargetAndTransition | VariantLabels"
        }
      },
      "onDirectionLock": {
        "defaultValue": null,
        "description": "Callback function that fires a drag direction is determined.\n\n```jsx\n<motion.div\n  drag\n  dragDirectionLock\n  onDirectionLock={axis => console.log(axis)}\n/>\n```\n@public",
        "name": "onDirectionLock",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDragHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDragHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "(axis: \"x\" | \"y\") => void"
        }
      },
      "onDragTransitionEnd": {
        "defaultValue": null,
        "description": "Callback function that fires when drag momentum/bounce transition finishes.\n\n```jsx\n<motion.div\n  drag\n  onDragTransitionEnd={() => console.log('Drag transition complete')}\n/>\n```\n@public",
        "name": "onDragTransitionEnd",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDragHandlers"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDragHandlers"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "drag": {
        "defaultValue": null,
        "description": "Enable dragging for this element. Set to `false` by default.\nSet `true` to drag in both directions.\nSet `\"x\"` or `\"y\"` to only drag in a specific direction.\n\n```jsx\n<motion.div drag=\"x\" />\n```",
        "name": "drag",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"x\" | \"y\""
        }
      },
      "whileDrag": {
        "defaultValue": null,
        "description": "Properties or variant label to animate to while the drag gesture is recognised.\n\n```jsx\n<motion.div whileDrag={{ scale: 1.2 }} />\n```",
        "name": "whileDrag",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "TargetAndTransition | VariantLabels"
        }
      },
      "dragDirectionLock": {
        "defaultValue": null,
        "description": "If `true`, this will lock dragging to the initially-detected direction. Defaults to `false`.\n\n```jsx\n<motion.div drag dragDirectionLock />\n```",
        "name": "dragDirectionLock",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dragPropagation": {
        "defaultValue": null,
        "description": "Allows drag gesture propagation to child components. Set to `false` by\ndefault.\n\n```jsx\n<motion.div drag=\"x\" dragPropagation />\n```",
        "name": "dragPropagation",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dragConstraints": {
        "defaultValue": null,
        "description": "Applies constraints on the permitted draggable area.\n\nIt can accept an object of optional `top`, `left`, `right`, and `bottom` values, measured in pixels.\nThis will define a distance from the named edge of the draggable component.\n\nAlternatively, it can accept a `ref` to another component created with React's `useRef` hook.\nThis `ref` should be passed both to the draggable component's `dragConstraints` prop, and the `ref`\nof the component you want to use as constraints.\n\n```jsx\n// In pixels\n<motion.div\n  drag=\"x\"\n  dragConstraints={{ left: 0, right: 300 }}\n/>\n\n// As a ref to another component\nconst MyComponent = () => {\n  const constraintsRef = useRef(null)\n\n  return (\n     <motion.div ref={constraintsRef}>\n         <motion.div drag dragConstraints={constraintsRef} />\n     </motion.div>\n  )\n}\n```",
        "name": "dragConstraints",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "false | Partial<BoundingBox> | { current: Element; }"
        }
      },
      "dragElastic": {
        "defaultValue": null,
        "description": "The degree of movement allowed outside constraints. 0 = no movement, 1 =\nfull movement.\n\nSet to `0.5` by default. Can also be set as `false` to disable movement.\n\nBy passing an object of `top`/`right`/`bottom`/`left`, individual values can be set\nper constraint. Any missing values will be set to `0`.\n\n```jsx\n<motion.div\n  drag\n  dragConstraints={{ left: 0, right: 300 }}\n  dragElastic={0.2}\n/>\n```",
        "name": "dragElastic",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "DragElastic"
        }
      },
      "dragMomentum": {
        "defaultValue": null,
        "description": "Apply momentum from the pan gesture to the component when dragging\nfinishes. Set to `true` by default.\n\n```jsx\n<motion.div\n  drag\n  dragConstraints={{ left: 0, right: 300 }}\n  dragMomentum={false}\n/>\n```",
        "name": "dragMomentum",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dragTransition": {
        "defaultValue": null,
        "description": "Allows you to change dragging inertia parameters.\nWhen releasing a draggable Frame, an animation with type `inertia` starts. The animation is based on your dragging velocity. This property allows you to customize it.\nSee {@link https://motion.dev/docs/react-motion-component#dragtransition Inertia} for all properties you can use.\n\n```jsx\n<motion.div\n  drag\n  dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n/>\n```",
        "name": "dragTransition",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "InertiaOptions"
        }
      },
      "dragControls": {
        "defaultValue": null,
        "description": "Usually, dragging is initiated by pressing down on a component and moving it. For some\nuse-cases, for instance clicking at an arbitrary point on a video scrubber, we\nmight want to initiate dragging from a different component than the draggable one.\n\nBy creating a `dragControls` using the `useDragControls` hook, we can pass this into\nthe draggable component's `dragControls` prop. It exposes a `start` method\nthat can start dragging from pointer events on other components.\n\n```jsx\nconst dragControls = useDragControls()\n\nfunction startDrag(event) {\n  dragControls.start(event, { snapToCursor: true })\n}\n\nreturn (\n  <>\n    <div onPointerDown={startDrag} />\n    <motion.div drag=\"x\" dragControls={dragControls} />\n  </>\n)\n```",
        "name": "dragControls",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "dragSnapToOrigin": {
        "defaultValue": null,
        "description": "If true, element will snap back to its origin when dragging ends.\n\nEnabling this is the equivalent of setting all `dragConstraints` axes to `0`\nwith `dragElastic={1}`, but when used together `dragConstraints` can define\na wider draggable area and `dragSnapToOrigin` will ensure the element\nanimates back to its origin on release.",
        "name": "dragSnapToOrigin",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dragListener": {
        "defaultValue": null,
        "description": "By default, if `drag` is defined on a component then an event listener will be attached\nto automatically initiate dragging when a user presses down on it.\n\nBy setting `dragListener` to `false`, this event listener will not be created.\n\n```jsx\nconst dragControls = useDragControls()\n\nfunction startDrag(event) {\n  dragControls.start(event, { snapToCursor: true })\n}\n\nreturn (\n  <>\n    <div onPointerDown={startDrag} />\n    <motion.div\n      drag=\"x\"\n      dragControls={dragControls}\n      dragListener={false}\n    />\n  </>\n)\n```",
        "name": "dragListener",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onMeasureDragConstraints": {
        "defaultValue": null,
        "description": "If `dragConstraints` is set to a React ref, this callback will call with the measured drag constraints.\n@public",
        "name": "onMeasureDragConstraints",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(constraints: BoundingBox) => void | BoundingBox"
        }
      },
      "_dragX": {
        "defaultValue": null,
        "description": "Usually, dragging uses the layout project engine, and applies transforms to the underlying VisualElement.\nPassing MotionValues as _dragX and _dragY instead applies drag updates to these motion values.\nThis allows you to manually control how updates from a drag gesture on an element is applied.\n@public",
        "name": "_dragX",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "MotionValue<number>"
        }
      },
      "_dragY": {
        "defaultValue": null,
        "description": "Usually, dragging uses the layout project engine, and applies transforms to the underlying VisualElement.\nPassing MotionValues as _dragX and _dragY instead applies drag updates to these motion values.\nThis allows you to manually control how updates from a drag gesture on an element is applied.\n@public",
        "name": "_dragY",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeDraggableOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeDraggableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "MotionValue<number>"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "If `true`, this component will automatically animate to its new position when\nits layout changes.\n\n```jsx\n<motion.div layout />\n```\n\nThis will perform a layout animation using performant transforms. Part of this technique\ninvolved animating an element's scale. This can introduce visual distortions on children,\n`boxShadow` and `borderRadius`.\n\nTo correct distortion on immediate children, add `layout` to those too.\n\n`boxShadow` and `borderRadius` will automatically be corrected if they are already being\nanimated on this component. Otherwise, set them directly via the `initial` prop.\n\nIf `layout` is set to `\"position\"`, the size of the component will change instantly and\nonly its position will animate.\n\nIf `layout` is set to `\"size\"`, the position of the component will change instantly and\nonly its size will animate.\n\nIf `layout` is set to `\"preserve-aspect\"`, the component will animate size & position if\nthe aspect ratio remains the same between renders, and just position if the ratio changes.\n@public",
        "name": "layout",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"position\" | \"size\" | \"preserve-aspect\""
        }
      },
      "layoutId": {
        "defaultValue": null,
        "description": "Enable shared layout transitions between different components with the same `layoutId`.\n\nWhen a component with a layoutId is removed from the React tree, and then\nadded elsewhere, it will visually animate from the previous component's bounding box\nand its latest animated values.\n\n```jsx\n  {items.map(item => (\n     <motion.li layout>\n        {item.name}\n        {item.isSelected && <motion.div layoutId=\"underline\" />}\n     </motion.li>\n  ))}\n```\n\nIf the previous component remains in the tree it will crossfade with the new component.\n@public",
        "name": "layoutId",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "layoutDependency": {
        "defaultValue": null,
        "description": "@public",
        "name": "layoutDependency",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "layoutScroll": {
        "defaultValue": null,
        "description": "Whether a projection node should measure its scroll when it or its descendants update their layout.\n@public",
        "name": "layoutScroll",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layoutRoot": {
        "defaultValue": null,
        "description": "Whether an element should be considered a \"layout root\", where\nall children will be forced to resolve relatively to it.\nCurrently used for `position: sticky` elements in Framer.",
        "name": "layoutRoot",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "data-framer-portal-id": {
        "defaultValue": null,
        "description": "Attached to a portal root to ensure we attach the child to the document root and don't\nperform scale correction on it.",
        "name": "data-framer-portal-id",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "layoutCrossfade": {
        "defaultValue": null,
        "description": "By default, shared layout elements will crossfade. By setting this\nto `false`, this element will take its default opacity throughout the animation.",
        "name": "layoutCrossfade",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeLayoutOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeLayoutOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "custom": {
        "defaultValue": null,
        "description": "Custom data to use to resolve dynamic variants differently for each animating component.\n\n```jsx\nconst variants = {\n  visible: (custom) => ({\n    opacity: 1,\n    transition: { delay: custom * 0.2 }\n  })\n}\n\n<motion.div custom={0} animate=\"visible\" variants={variants} />\n<motion.div custom={1} animate=\"visible\" variants={variants} />\n<motion.div custom={2} animate=\"visible\" variants={variants} />\n```\n@public",
        "name": "custom",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAdvancedOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAdvancedOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "inherit": {
        "defaultValue": null,
        "description": "@public Set to `false` to prevent inheriting variant changes from its parent.",
        "name": "inherit",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAdvancedOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAdvancedOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ignoreStrict": {
        "defaultValue": null,
        "description": "@public Set to `false` to prevent throwing an error when a `motion` component is used within a `LazyMotion` set to strict.",
        "name": "ignoreStrict",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAdvancedOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAdvancedOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "values": {
        "defaultValue": null,
        "description": "Provide a set of motion values to perform animations on.",
        "name": "values",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAdvancedOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAdvancedOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "{ [key: string]: MotionValue<number> | MotionValue<string>; }"
        }
      },
      "transformTemplate": {
        "defaultValue": null,
        "description": "By default, Motion generates a `transform` property with a sensible transform order. `transformTemplate`\ncan be used to create a different order, or to append/preprend the automatically generated `transform` property.\n\n```jsx\n<motion.div\n  style={{ x: 0, rotate: 180 }}\n  transformTemplate={\n    ({ x, rotate }) => `rotate(${rotate}deg) translateX(${x}px)`\n  }\n/>\n```\n@param transform - The latest animated transform props.\n@param generatedTransform - The transform string as automatically generated by Motion\n@public",
        "name": "transformTemplate",
        "parent": {
          "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
          "name": "MotionNodeAdvancedOptions"
        },
        "declarations": [
          {
            "fileName": "components/node_modules/.pnpm/motion-dom@12.23.2/node_modules/motion-dom/dist/index.d.ts",
            "name": "MotionNodeAdvancedOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "TransformTemplate"
        }
      }
    }
  }
]